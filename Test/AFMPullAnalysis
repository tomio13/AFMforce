#!/usr/bin/env python
""" Analysing the pulling forces on single molecule AFM force measurements.
    Meant to be used with JPK force-data files.

    Author:     Tomio
    Date:       2015-
    Warranty:   None
    Licence:    CreativeCommons 4.0
    https://creativecommons.org/licenses/by/4.0/legalcode
    Actual version: 2019-11-27
"""

import numpy as nu
from matplotlib.pyplot import ion, ioff
ioff()
from matplotlib import pyplot as pl

from BatchAnalyzer import *
from AFMforce import *

from glob import glob
import sys, os

#from matplotlib import pyplot as pl
configfile = "config.txt"

if __name__=="__main__":
    args = sys.argv[1:]

    #did we get an argument on the command line?
    if len(args) > 0:
        if os.path.isfile(args[0]):
            configfile = args[0]
            print("New config file: %s" %configfile)
        else:
            print("Invalid config file name: %s" %args[0])
#            sys.exit(0)
# end if __name__

config = {'dir': './', 'outdir':'./Results',
          'DataType':'jpk',
          'ext':'.png', 'dpi':150,
          'fmask': '*.jpk-force',
          'BaseEnd': 0.3, 'BaseEndZ':-1.0, 'BgOrder':1,
          'temperature': 295.16,
          'MinRange': 50, 'MinRangeZ': -1, # range in points or Z units for finding minima
          'wave': False, # remove interferometric background
          'NoiseFactor': 3.0,
          'SmoothWidth': 10,
          'SensorResponse': -1.0,
          'SpringConstant': -1.0,
          'NLoadingRate':5,
          'N':-1}
# if SaveSmoothed is set to anything, the smootehened data will be saved
# if FitSmoothed' is defined, use Fs instead of F for the peak analysis
# NoiseRange is a force value in nN for thresholding forces
# EstimateSensorResponse to automatic finding sensor response on the fly
# KeepBaseline to search for peaks in the full force curve, otherwise the
#               baseline tail is cut off

# ReadConf can take care of the missing file, but fills up config
# with default values properly
# if simplify is set, do not return lists, but their last elements only
config = ReadConf(configfile, config, simplify= True)

#global parameters -> to be replaced by config...
indir = os.path.abspath(config['dir'])
outdir = os.path.abspath(config['outdir']) \
                    if config['outdir'] != "dir" else indir

dpi = config['dpi']
ext = config['ext']
datatype = config['DataType'].lower()

ext = config['ext'] #could also be .svg!
fmask = config['fmask']
# cut Z at this distance
Zmax = config['Zmax'] if 'Zmax' in config else -1.0

# what portion (0...1) should the baseline estimator use?
# we make it large, because this should be a smooth curve
BaseEnd = config['BaseEnd']
BaseEndN = int(config['BaseEndN']) if 'BaseEndN' in config else -1
BaseRange = config['BaseEndZ']

Temp = config['temperature']
#how many points to use for local minima search
MinRangeZ = config['MinRangeZ']
MinRange = int(config['MinRange'])
NoiseFactor = config['NoiseFactor'] #multiplier to find peaks out of noise
#NoiseRange is a force value in nN for thresholding forces
#it overrides NoiseFactor
NoiseRange = config['NoiseRange'] if 'NoiseRange' in config else -1.0

bgorder = config['BgOrder']
SmoothRadius = int(config['SmoothWidth'])
SensorResponse = config['SensorResponse']
SpringConstant = config['SpringConstant']

NLoadingRate = int(config['NLoadingRate'])
#end of filling in global parameters

#get the files:
lst = glob(os.path.join(indir,fmask))
lst.sort()
N = int( config['N'] )
if N < 0  or N > len(lst):
    N = len(lst)
#end setting max number of curves

print("Found %d force files" %len(lst))
if not os.path.isdir(outdir):
    os.mkdir(outdir)

# collect the results in a table formed by a list of lists
# the header is something like:
# resheader = ['filename', 'X, micron','Y, micron',\
#             'Number_of_minima', 'Fmax', 'Fmax.analyzed',
#             'Fmax.fitted',\
#             'Lmax.Fmax.analyzed', 'rate.Fmax',\
#             'Flast.max', 'Flast.rate', 'Llast', 'Flast.fitted.max']

####################################################################
########## end of preparation, now make some report:
rep = Report(outdir,\
        header="Force analysis for AFM force data files ver. 0.4\nStart",\
        add_time=False)
rep.write('File path:', indir)
rep.write('Generating results into:', outdir)
rep.write('Analyzing', N, 'files')
rep.write('********************************************')
rep.write("Parameters:")
rep.write("AFM datatype expected:", datatype)

if Zmax > 0.0:
    rep.write('Cut Z distance at:',Zmax,'microns')

if BaseRange > 0.0:
    rep.write('Baseline uses',BaseRange, 'microns from the end')
elif BaseEndN > 2:
    repr.write('Baseline uses up to',BaseEndN,'points from the end')
else:
    rep.write('Baseline uses',BaseEnd,'part of the range at the end')

if 'wave' in config and config['wave']:
    rep.write('Remove interference background')
else:
    rep.write('Baseline is fitted with a', bgorder, 'order polynomial')

if NoiseRange < 0:
    rep.write("Peaks are identified as", NoiseFactor, "times std of end part")
else:
    rep.write("Peaks are identified as larger than", NoiseRange)

rep.write("Smoothening uses a half-width of", SmoothRadius, "points")
rep.write('Temperature is set to',Temp,'Kelvin')
if MinRangeZ < 0.0:
    rep.write('Range of local minima search is',MinRange,'points')
else:
    rep.write('Range of local minima search is',MinRangeZ,'Z units')
#end if

if SensorResponse > 0:
    rep.write("Force sensor response to", SensorResponse, "m/V")

if SpringConstant > 0:
    rep.write("Force spring constant to", SpringConstant, "N/m")

rep.write(NLoadingRate,"points are used to estimate the loading rate")
rep.write('********************************************')
#end generating report header

############################################################################
#############   Processing starts here #####################################
############################################################################

res = []
resheader = []
#loop through the file list and do the job:
for fn in lst[:N]:
    # collect the results in a list of lists
    # generated from the values of this dict:
    resline = {}

    #extract path:
    fn0 = os.path.splitext(os.path.split(fn)[-1])[0]

    rep.write("Loading", fn0, color='cyan');
    if datatype == 'jpk':
        a = JPKforce(fn)
    elif datatype == 'bruker':
        a = Brukerforce(fn)
    elif datatype == 'pavone':
        a = Pavoneforce(fn)
    else:
        rep.write("Unknown data type", color='red')
        continue



    #get position:
    xy = a.position
    X,Y = xy if len(xy) != 0 else [0.0, 0.0]

    # record the position and file name:
    resline['filename']= fn0
    # convert X and Y to micrometers on storing them:
    resline['X, micron']= X*1E6
    resline['Y, micron']= Y*1E6

    # find the retraction segment
    segfound = False
    for i in a.segments:
        a.segment = i
        if a.segment_name == 'retract':
            segfound = True
            break
    #end for segment in data

    if not segfound:
        rep.write('No appropriate segment was found', color='red')
        #get on to the next segment candidate:
        continue

    # set filtering max z-range:
    if Zmax > 0:
        if a.Z_unit == 'm':
            a.Zmax = 1E-6*Zmax
        elif a.Z_unit == 'nm':
            a.Zmax = Zmax*1000.0
        else:
            a.Zmax = Zmax

    # do we have data?
    z = a.Z
    zunit = a.Z_unit
    if len(z) == 0 or z[0] == z[-1] or zunit=='':
        rep.write('Height data not found or invalid!', color='red');
        continue;
    #end if

    # get the force data for testing only
    if len(a.force) == 0  or a.force.min() == a.force.max():
        rep.write('No force or invalid force data found!')
        continue
    #end if


    # baseline correction and find the contact point:
    a.baseline(end= BaseEnd,
               Zrange= BaseRange*1E-6,
               order= bgorder,
               endN= BaseEndN,
               wave= config['wave'],
               Nsmooth= SmoothRadius
               )
    a.find_contact_point()

    if "EstimateSensorResponse" in config :
        SensorResponse = find_slope(a.Z, a.deflection_raw)
        SensorResponse = 1.0/SensorResponse if SensorResponse > 0 else -1.0
        rep.write("Estimated new sensor response as:", SensorResponse, "m/V",
                  color='green')

    # writing back the sensor response and spring constant
    # regenerates deflection and force data:
    if SensorResponse > 0.0:
        a.sensor_response = SensorResponse
    if SpringConstant > 0.0:
        a.force_constant = SpringConstant
    #end if

    # convert any height to microns:
    if zunit == 'm':
        z = a.Z*1E6;
        D = a.distance * 1E6
        zunit = f'micro{zunit}'
        #a.Z is in meter:

    elif zunit == 'nm':
        z = a.Z / 1000;
        D = a.distance /1000
        zunit = 'micron'
        #a.Z is in nm:
    else:
        rep.write('Unknown distance unit warning!!!!', zunit, color='red')

    if a.force_unit == 'N':
        F = a.force * 1E9 #turn N to nN
        Funit = f'n{a.force_unit}'
    else:
        F = a.force
        Funit = a.force_unit
    #length of data arrays:
    N = len(z)

    rep.write('Found height data:', a.Z_type, 'using', zunit, 'units')
    rep.write('We have a force range of', F.min(),':', F.max(),'using', Funit)

    if a.force_constant < 0 or a.sensor_response < 0:
        rep.write('Not calibrated data! Skipping', color='red')
        continue
    #end if

    # prepare for outputs
    fout = f'{fn0}-Pull-peaks'

    # the full command would be:
    # Ds = Smooth(D, radius = SmoothRadius, par=2, type="SavGol")
    Ds = Smooth(D, SmoothRadius)
    Fs = Smooth(F, SmoothRadius)

    if 'SaveSmoothed' in config:
        SaveData(['D, micron', 'F, nN'],\
                    zip(Ds, Fs),\
                    os.path.join( outdir, f'{fn0}-smoothed-curve.txt'),
                'Smoothened AFM curve', rep)
    # end save smoothed

    # from baseline correction, what segment was used?
    # this we may not want to analyze for rupture forces...
    if BaseRange > 0.0:
        #z is in microns, and we required BaseRange to be in microns
        Nmax = (z < (z.max() - BaseRange)).sum()

    elif BaseEndN > 2:
        Nmax = BaseEndN
    else:
        Nmax = int(N*(1.0 - BaseEnd))

    # identify the limit for significant minima:
    MinFLim = -NoiseFactor* F[Nmax:].std() if NoiseRange < 0 else -NoiseRange
    MinFLimS = -NoiseFactor* Fs[Nmax:].std() if NoiseRange < 0 else -NoiseRange

    # find local minima:

    # if FindMinima gets a Zrange, it tries using dZ for defining
    # the index range. So, if the user wants this, defined MinRangeZ:
    minZ = D if MinRangeZ > 0.0 else []

    # filter the minima for their relevance:
    if not 'KeepBaseline' in config :
        # we do not accept minimum peaks in the base line range!
        mini = FindMinima(Fs[:Nmax],
                          MinRange,
                          Z=minZ[:Nmax],
                          dZ=MinRangeZ,
                          minf = MinFLimS)

    else:
        mini = FindMinima(Fs,
                          MinRange,
                          Z= minZ,
                          dZ= MinRangeZ,
                          minf = MinFLimS)

    # !!! this should not happen, but I have seen this before: !!!
    if 0 in mini:
        mini.pop(0);

    if len(mini) < 1:
        rep.write("No significant minima were found", color='red')
    #else:
    #    Plot(Ds[mini], Fs[mini], fmt='ro', newplot=False)
    #end if

    rep.write("Rupture force analysis", color='blue')

    # now comes a more detailed analysis, if anythhing:
    # the z0 is more reliable than D <= 0, because of the noise in
    # deflection... So, use the z0 estimation (z0 is subtracted):
    D0_indx = (z <= 0.0).sum()
    # refine it to be closer to the flat part:
    D0_indx = (F[D0_indx:] <= 0).nonzero()[0][0] + D0_indx

    # shift to the new 0, we are pulling molecueles from here:
    # first Ds, because D changes after:
    Ds = Ds - D[D0_indx]
    D = D - D[D0_indx]

    # first some information
    Plot(D, F, fmt='+', alpha=0.3)
    Plot(Ds, Fs, fmt='y-', alpha=0.5, newplot=False)
    Plot([Ds.min(), Ds.max()], [0,0], fmt='w-', linewidth= 2, newplot= False)

    # a vertical indicator of the surface contact point:
    Plot((D[D0_indx],D[D0_indx]), (F.min(), F.max()),
            xlabel = "distance, %s" %zunit,
            ylabel = "force, %s" %Funit,
            fmt='r-',alpha=0.3, newplot=False)

    # for debugging, it may help:
    mini_new = [] # a list of [i0,i1] lists
    # In the summary, we want the maximal pulling force and its
    # fitted chain length:
    L_max = 0.0
    F_max = 0.0
    Fload_max= 0.0
    F_max_fitted = 0.0

    if len(mini) > 0:
        txt = f"{fn0}-fitted-peaks.txt"
        fout = os.path.join(outdir,txt)
        peakres = []

        i0 = D0_indx
        D1_old = 0.0    # at what distance did the previous rupture?

        if 'FitSmoothed' in config:
            MinFlim = MinFLimS
            F = Fs
            rep.write('Use smoothed data for fit!\n')
            rep.write('Using noise level:', MinFlim)
            Plot([D.min(), D.max()], [MinFlim, MinFlim], fmt= 'r--', alpha= 0.2, newplot=0)

        # these are only local information we do not record
        print('Analyzing peak at position index:', mini )

        #############################################
        # Peak analysis for this file / curve
        #############################################

        peakheader = []
        for i in range(len(mini)):
            # peakresline is the peak information row content
            peakresline = {'index': i}

            #make sure it is a valid right index:
            i1 = min(mini[i], N)

            print("i0, i1:", i0, i1)
            if i0 >= i1:
                i0 = max(i1 - MinRange, D0_indx)
                print("Invalid range, overriding i0 to", i0)
                if i0 >= i1:
                    print("Override failed, skipping")
                    continue
            # end i0 validation

            # refine i0:
            # it is possible that the jump back took multiple points,
            # including those would throw the fit
            # we take the first point, which falls closer to 0 than the
            # half standard deviation of the I values in this segment
            i0_indx = (-0.5*F[i0:i1].std() < F[i0:i1] ).nonzero()[0]
            i0_alt = (F[i0:i1] == F[i0:i1].max()).nonzero()[0][-1] + i0

            if len( i0_indx ) > 0 :
                i0_new = i0_indx[-1] + i0
            else:
                i0_new = -1

            #if i0_new is invalid or worse than the alternative i0,
            #check for the validity of i0_alt and use it:
            if (i0_new >= (i1-3) or i0_new < i0_alt) and i0_alt < (i1-3):
                i0 = i0_alt
            elif i0_new > -1 and i0_new < (i1-3):
                i0 = i0_new
            # else it remains untouched

            # refine i1:
            # the minimal distance between peeks is exactly MinRange
            # the index from the smoothed data may be closer than
            # MinRange to the previous peak, resulting in i0 = i1
            # to avoid this, we do not allow the previous peak in range!

            # Smoothing smears out the peak, offsetting it slightly
            # So, both should matter...
            RefineR = int(max(MinRange, 2*SmoothRadius))
            ti0 = max(i1 - RefineR + 1, i0+1)
            ti1 = min(i1 + RefineR, len(F))
            if ti1 - ti0 < 2:
                print("Empty segment found!")
                continue

            minF = min(F[ti0:ti1])

            if minF > MinFLim:
                print("this peak is still within noise", minF, "vs.", MinFLim)
                continue

            i1 = ti0 + (F[ti0:ti1] == minF).nonzero()[0][0] +1
            if (i1 - i0) < 3:
                print("Too few points in segment!")
                continue

            peakresline[f'Dmax, {zunit}'] = D[i1]
            #new in 2015-12-10:
            #add time of the rupture within the scan:
            peakresline['time, sec.']= a.t[i1]
            #local force maximum:
            peakresline[f'Fmax, {Funit}']= -minF
            #local raw length since last rupture (L_raw):
            peakresline['L_raw'] = D[i1] - D1_old

            print("Fitting segment: %d - %d" %(i0,i1))
            #now fit the original data segment:
            fit = fit_WLC(D[i0:i1],F[i0:i1], T=Temp)

            #loading rates:
            ldrate = -nu.polyfit(a.t[i1-NLoadingRate:i1],\
                    F[i1-NLoadingRate:i1],1)[0] \
                    if i1 > NLoadingRate else 0.0

            #show the identified rupture point:
            Plot(D[i1-1:i1], F[i1-1:i1],    fmt='ro', alpha=0.5, newplot=0)
            Plot(D[i0:i1], F[i0:i1],        fmt='g+', alpha=0.3, newplot=0)
            Plot(fit['Z'], -fit['fitted'],  fmt='r-', alpha=0.3, newplot=0)

            print("Fitted C: %.5f, L: %.5f" %(fit['Ft'], fit['L']))
            #add loading rate
            peakresline['Loading_rate, nN/s']= ldrate

            #add fit results to the output details:
            peakresline['L']= fit['L']
            peakresline['dL']= fit['dL']
            #local maximal force, fitted
            fF_max = fit['fitted'].max()
            peakresline['Fmax_fitted']= fF_max

            # check and store the global maxima:
            # the force is negative, so we go for the
            # minimum, and the last one if they are equal
            if F_max < -minF:
                F_max = -minF
                L_max = fit['L']
                Fload_max=  ldrate
                F_max_fitted = fF_max

#            peakresline.append(fit['F0'])
#            peakresline.append(fit['dF0'])

            peakresline['lc']= fit['lc']
            peakresline['dlc']= fit['dlc']
            peakresline['r2']= fit['r2']
            peakresline['chi2']= fit['chi2']
            #number of points in this segment:
            peakresline['N_of_points'] = i1-i0

            #add the results line to the detailed table:
            peakres.append(list(peakresline.values()))

            if not peakheader:
                peakheader= list(peakresline.keys())

            #we need some inheritence here:
            D1_old = D[i1]

            #for debugging purposes
            mini_new.append([i0,i1])
            i0 = i1
        #end for i

        # if we erased a false peak, and we have only
        # an empty list, then skip the end:
        if not peakres:
            continue

       # just a reminder:
       #  peakheader = ["index", "Dmax (%s)" %zunit, "time (s)",\
       #              "Fmax (%s)" %Funit, "L_raw",\
       #              'Loadingrate (nN/s)',\
       #              #fitted data comes here:
       #              "L", 'dL', "Fmax_fitted", \
       #             # "F0", "dF0",\
       #              'lc', 'dlc', 'r2', 'chi2', "N_of_points"]

        SaveData(peakheader, peakres,\
                fout, "Analysis of individual peaks", report=rep)

    # Global report:
    # how many local minima are found?
    if len(mini) > 0:
        #peakres has as many lines as many usable fit ranges were found!
        resline['Number_of_minima']= len(peakres)
    else:
        resline['Number_of_minima']= 0
    # add the global minimum => maximal pulling force
    resline['Fmax_global']= F.min()
    # then the maximal rupture force from the fitted ones. It is the maximal force we could fit
    resline['Fmax.analyzed']= F_max
    resline['Fmax.fitted']= F_max_fitted
    resline['Lmax.Fmax.analyzed']= L_max
    resline['rate.Fmax']= Fload_max

    # Integral analysis (same as in AFM-force-analysis
    intindx = (Fs < 0).nonzero()[0]
    if len(intindx) > 0:
        i0 = intindx[0]
        intindx = (Fs[i0:] > 0).nonzero()[0]
        i1 = i0 + intindx[0] if len(intindx) > 0 else len(Fs)

    resline['Adhesion_energy_smooth, aJ']= nu.trapezoid(Fs[i0:i1], Ds[i0:i1])*1000.0 # aJ
    resline['Adhesion_energy, aJ']= nu.trapezoid(F[i0:i1], D[i0:i1])*1000.0 # aJ

    rep.write('Smoothed adhesion energy', resline['Adhesion_energy_smooth, aJ'], 'aJ', color='green')
    rep.write('Raw adhesion energy', resline['Adhesion_energy, aJ'], 'aJ', color='green')

    pl.fill_between(Ds[i0:i1], Fs[i0:i1],
                    nu.zeros(i1-i0), color='yellow')

    txt = "%s-Plot" %os.path.splitext(os.path.split(fn)[-1])[0]
    fout = os.path.join(outdir,txt)
    Plot([],[], filename = txt, outpath= outdir, dpi = dpi, \
            ext=ext, newplot=False)


    # Now, the last, break away event, the break-away force
    # rk = [peakheader[ri] for ri in [3,5,6,8]]
    # !!! this may need some refining... !!!
    rk = [f'Fmax, {Funit}', 'Loading_rate, nN/s', 'L', 'Fmax_fitted']
    print('Peak header', peakheader)
    if peakres and peakheader:
        # we need the index of each keys in the actual peak list
        # to get the values for the last row
        rv = {ri: peakres[-1][peakheader.index(ri)] for ri in rk}
    else:
        rv = {ri: 0 for ri in rk}
    #end if there was a last fit
    print('Rv', rv)
    resline.update(rv)

    rep.write("\n\n")
    res.append(list(resline.values()))

    if not resheader:
        resheader = list(resline.keys())
#end for filenames


SaveData(resheader, res, \
        os.path.join(outdir,"Rupture-force-analysis-results.dat" ),\
        "Results of rupture force unalysis", report=rep)

rep.write("Analysis done", True)
rep.close()

#to read in R:
#a <- read.table("Indentation-resilts-table.txt",as.is=T,
i# col.names=c('file', 'x', 'y', 'N', 'F.max.global', 'F.max.anal', 'F.max.fit',
# 'L.max.F.max', 'rate.F.max', 'adhesion.aJ.smooth', 'adhesion.aJ', 'F.breakaway',
# 'loading.breakaway', 'L.breakaway', 'F.breakaway.fit'))

