#!/usr/bin/env python
from matplotlib import use
use("TKAgg")
from AFMforce import *
from matplotlib import pyplot as pl
pl.ion()

import sys, os
from time import sleep

#add a callback to quit on 'q':
def quit_key(event):
    if event.key in "qQ":
        #die baby, die:
        sys.exit(0)
#end quit_key


if __name__ == '__main__':
    #We are called with a file name
    args = sys.argv
    saving = False

    if len(args) < 2:
        print("Call with the name of a AFM-force file")
        sys.exit(0)
    else:
        if args[1] == "-s":
            print("save activated")
            saving = True
            args.pop(1)
            ext = "png"
        elif args[1] == "-svg":
            print("save activated")
            saving = True
            args.pop(1)
            ext = "svg"
        #end if save

        fig = pl.figure()
        plt = fig.add_subplot(111)
        #add the quit function:
        #one can disconnect the other bindings by:
        #fig.canvas.mpl_disconnect(fig.canvas.manager.key_press_handler_id)
        #but we keep that as well, since it does nothing on 'q'
        fig.canvas.mpl_connect("key_press_event", quit_key)

        N = len(args[1:])

        # figure out which of the force classes can load it:
        # (fortunately they are rather different)
        for i in args[1:]:
            if ".jpk-force" in i:
                a = JPKforce(i)
            elif '.spm.txt' in i:
                a = Brukerforce(i)
            else:
                a = Pavoneforce(i)

            if a == {}:
                print("No data found")
                continue
            #end if
            print(f'loaded / plot: {os.path.split(i)[-1]}')

            plt.cla()
            #find the extension segment:
            for ii in a.segments:
                a.segment = ii

                #turned off baseline correction to have stalling data
                #in the right position for jpk-force files
                # Occasionally we get weird curves when automatic point list
                # is used...
                try:
                    a.baseline(0.3, order= 1)
                except TypeError:
                    print('Invalid baseline range!')
                    continue
                #a.find_contact_point()
                # Z0 = Contact_point(a.distance, a.force, 90, 30, 'Gauss')
                # Z = a.Z
                Z = a.distance
                F = a.force
                unit = a.Z_unit
                vunit = a.force_unit

                # JPK has everything in SI, others may not...
                # nm distance and nN force is nice... for example
                if a.Z_unit == 'm':
                    Z = a.Z*1E6
                    unit = 'micron'

                if a.force_unit == 'N':
                    F = F*1E9
                    vunit = 'nN'
                elif a.force_unit == 'm':
                    F = F*1E9
                    vunit = 'nm'

                plt.plot(Z, F, '+', alpha=0.6)
            #end for

            ttext = f"Z piezo {unit}"
            plt.set_xlabel(ttext)
            ttext = f"Force, {vunit}"
            plt.set_ylabel(ttext)
            plt.set_title(os.path.split(i)[-1])

            if saving:
                fname = f'{os.path.splitext(i)[0]}.{ext}'
                pl.savefig(fname, \
                        dpi=150, transparent=True)
            #pl.draw()
            pl.ion()
            fig.canvas.draw_idle()
            #fig.canvas.draw()
            pl.ioff()
            print(f"Spring constant {a.force_constant:#.6g}")
            print(f"Sensor response {a.sensor_response:#.6g}")

            if N > 1:
                txt = input("Press ENTER")

        #end for
        pl.show()
        fig.close()
